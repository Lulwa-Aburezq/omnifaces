<?xml version="1.0" encoding="UTF-8"?>
<!-- 
   Copyright 2012 OmniFaces.

   Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
   the License. You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
   an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
   specific language governing permissions and limitations under the License.
 -->
<facelet-taglib 
	xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-facelettaglibrary_2_0.xsd"
	version="2.0"
>
	<namespace>http://omnifaces.org/ui</namespace>

	<!-- Tree ===================================================================================================== -->

	<tag>
		<description>
			<![CDATA[
				<strong><code>Tree</code></strong> is an <code>UIComponent</code> that supports data binding to a tree
				of data objects represented by a <code>TreeModel</code> instance, which is the current value of this
				component itself (typically established via a <code>ValueExpression</code>. During iterative processing
				over the nodes of tree in the tree model, the object for the current node is exposed as a request
				attribute under the key specified by the <code>var</code> attribute. The node itself is exposed as a
				request attribute under the key specified by the <code>varNode</code> attribute.
				<p>
				Only children of type <code>TreeNode</code> are allowed and processed by this component.
				<p>
				This component does not have a renderer since it does not render any markup by itself. This allows the
				developers to have full control over the markup of the tree by declaring the appropriate JSF components
				or HTML elements in the markup. Here is a basic usage example:
				<pre>
				&lt;o:tree value="#{bean.treeModel}" var="item" varNode="node"&gt;
				  &lt;o:treeNode&gt;
				    &lt;ul&gt;
				      &lt;o:treeNodeItem&gt;
				        &lt;li&gt;
				          #{node.index} #{item.someProperty}
				          &lt;o:treeInsertChildren /&gt;
				        &lt;/li&gt;
				      &lt;/o:treeNodeItem&gt;
				    &lt;/ul&gt;
				  &lt;/o:treeNode&gt;
				&lt;/o:tree&gt;
				</pre>				
			]]>
		</description>
		<tag-name>tree</tag-name>
		<component>
			<component-type>org.omnifaces.component.tree.Tree</component-type>
		</component>
		<attribute>
			<description>
				<![CDATA[
					The component identifier for this component. This value must be unique within the closest parent 
					component that is a naming container.
				]]>
			</description>
			<name>id</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					Flag indicating whether or not this component should be rendered (during Render Response Phase), or 
					processed on any subsequent form submit. The default value for this property is true.
				]]>
			</description>
			<name>rendered</name>
			<required>false</required>
			<type>java.lang.Boolean</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The <code>ValueExpression</code> linking this component to a property in a backing bean.
				]]>
			</description>
			<name>binding</name>
			<required>false</required>
			<type>javax.faces.component.UIComponent</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The current value of this component. As far only <code>TreeModel</code> is allowed as value.
				]]>
			</description>
			<name>value</name>
			<required>false</required>
			<type>java.lang.Object</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The name of the request attribute which exposes the wrapped data of the current node of the tree 
					model.
				]]>
			</description>
			<name>var</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The name of the request attribute which exposes the current node of the tree model.
				]]>
			</description>
			<name>varNode</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
	</tag>

	<tag>
		<description>
			<![CDATA[
				<strong><code>TreeNode</code></strong> is an <code>UIComponent</code> that represents a single tree node
				within a parent <code>Tree</code> component. Within this component, the <code>var</code> attribute of
				the parent <code>Tree</code> component will expose the tree node. Each of its children is processed by
				<code>TreeNodeItem</code>.
				<p>
				The <code>level</code> attribute can be used to specify for which tree node level as obtained by
				<code>TreeModel#getLevel()</code> this component should render the children by
				<code>TreeNodeItem</code>. The root tree node has level 0.
			]]>
		</description>
		<tag-name>treeNode</tag-name>
		<component>
			<component-type>org.omnifaces.component.tree.TreeNode</component-type>
		</component>
		<attribute>
			<description>
				<![CDATA[
					The component identifier for this component. This value must be unique within the closest parent 
					component that is a naming container.
				]]>
			</description>
			<name>id</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					Flag indicating whether or not this component should be rendered (during Render Response Phase), or 
					processed on any subsequent form submit. The default value for this property is true.
				]]>
			</description>
			<name>rendered</name>
			<required>false</required>
			<type>java.lang.Boolean</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The <code>ValueExpression</code> linking this component to a property in a backing bean.
				]]>
			</description>
			<name>binding</name>
			<required>false</required>
			<type>javax.faces.component.UIComponent</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The tree node level to render the node children for. The root level is <code>0</code>.
				]]>
			</description>
			<name>level</name>
			<required>false</required>
			<type>java.lang.Integer</type>
		</attribute>
	</tag>

	<tag>
		<description>
			<![CDATA[
				<strong><code>TreeNodeItem</strong> is an <code>UIComponent</code> that represents a single child tree
				node within a parent <code>TreeNode</code> component. Within this component, the <code>var</code>
				attribute of the parent <code>Tree</code> component will expose the child tree node.
				<p>
				This component allows a child component of type <code>TreeInsertChildren</code> which indicates the
				place to insert the children of the current child tree node recursively by a <code>TreeNode</code>
				component associated with the children's level in the same parent <code>Tree</code> component.
			]]>
		</description>
		<tag-name>treeNodeItem</tag-name>
		<component>
			<component-type>org.omnifaces.component.tree.TreeNodeItem</component-type>
		</component>
		<attribute>
			<description>
				<![CDATA[
					The component identifier for this component. This value must be unique within the closest parent 
					component that is a naming container.
				]]>
			</description>
			<name>id</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					Flag indicating whether or not this component should be rendered (during Render Response Phase), or 
					processed on any subsequent form submit. The default value for this property is true.
				]]>
			</description>
			<name>rendered</name>
			<required>false</required>
			<type>java.lang.Boolean</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The <code>ValueExpression</code> linking this component to a property in a backing bean.
				]]>
			</description>
			<name>binding</name>
			<required>false</required>
			<type>javax.faces.component.UIComponent</type>
		</attribute>
	</tag>

	<tag>
		<description>
			<![CDATA[
				<strong><code>TreeInsertChildren</code></strong> is an <code>UIComponent</code> that represents the
				insertion point for the children of a parent tree node which is represented by
				<code>TreeNodeItem</code>.
				<p>
				This component does not allow any children.
			]]>
		</description>
		<tag-name>treeInsertChildren</tag-name>
		<component>
			<component-type>org.omnifaces.component.tree.TreeInsertChildren</component-type>
		</component>
		<attribute>
			<description>
				<![CDATA[
					The component identifier for this component. This value must be unique within the closest parent 
					component that is a naming container.
				]]>
			</description>
			<name>id</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					Flag indicating whether or not this component should be rendered (during Render Response Phase), or 
					processed on any subsequent form submit. The default value for this property is true.
				]]>
			</description>
			<name>rendered</name>
			<required>false</required>
			<type>java.lang.Boolean</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The <code>ValueExpression</code> linking this component to a property in a backing bean.
				]]>
			</description>
			<name>binding</name>
			<required>false</required>
			<type>javax.faces.component.UIComponent</type>
		</attribute>
	</tag>

	<tag>
		<description>
			This component includes the output from a resource located at the given path. This path can
			not extend outside of the current Servlet context. A resource is either a Servlet or a JSP
			page.    	
		</description>
		<tag-name>resourceInclude</tag-name>
		<component>
			<component-type>org.omnifaces.component.resourceinclude.ResourceInclude</component-type>
		</component>
		 <attribute>
			<description>A String specifying the pathname to the resource</description>
			<name>path</name>
			<required>true</required>
			<type>java.lang.String</type>
		</attribute>
	</tag>

	<!-- Validator ================================================================================================ -->

	<tag>
		<description>
			<![CDATA[
				<strong>ValidateAllOrNone</strong> validates validates if at least ALL of the given <code>UIInput</code>
				components have been filled in or that NONE of the given <code>UIInput</code> components have been
				filled in. The default message is
				<blockquote>{0}: Please fill in all or none of those fields</blockquote>
				<hr>
				<h3>General usage of all multiple field validators</h3>
				<p>
				This validator must be placed inside the same <code>UIForm</code> as the <code>UIInput</code> components
				in question. The <code>UIInput</code> components must be referenced by a space separated collection of
				their client IDs in the <code>components</code> attribute. This validator can be placed anywhere in the
				form, but keep in mind that the components will be validated in the order as they appear in the form.
				So if this validator is been placed before all of the components, then it will be executed before any of
				the component's own validators. If this validator fails, then the component's own validators will not be
				fired. If this validator is been placed after all of the components, then it will be executed after any
				of the component's own validators. If any of them fails, then this validator will not be exeucted. It
				is not recommended to put this validator somewhere in between the referenced components as the resulting
				behaviour may be confusing. Put this validator either before or after all of the components, depending
				on how you would like to prioritize the validation.
				<pre>
				&lt;o:validateMultipleFields id="myId" components="foo bar baz" /&gt;
				&lt;h:message for="myId" /&gt;
				&lt;h:inputText id="foo" /&gt;
				&lt;h:inputText id="bar" /&gt;
				&lt;h:inputText id="baz" /&gt;
				</pre>
				<p>
				In an invalidating case, all of the referenced components will be marked invalid and a faces message
				will be added on the client ID of this validator component. The default message can be changed by the
				<code>message</code> attribute. Any "{0}" placeholder in the message will be substituted with a comma
				separated string of labels of the referenced input components.
				<pre>
				&lt;o:validateMultipleFields components="foo bar baz" message="{0} are wrong!" /&gt;
				</pre>
				<p>
				The faces message can also be shown for all of the referenced components using
				<code>showMessageFor="@all"</code>.
				<pre>
				&lt;o:validateMultipleFields components="foo bar baz" message="This is wrong!" showMessageFor="@all" /&gt;
				&lt;h:inputText id="foo" /&gt;
				&lt;h:message for="foo" /&gt;
				&lt;h:inputText id="bar" /&gt;
				&lt;h:message for="bar" /&gt;
				&lt;h:inputText id="baz" /&gt;
				&lt;h:message for="baz" /&gt;
				</pre>
				<p>
				The <code>showMessageFor</code> attribute defaults to <code>@this</code>. Other values than 
				<code>@this</code> or <code>@all</code> are not allowed.
			]]>
		</description>
		<tag-name>validateAllOrNone</tag-name>
		<component>
			<component-type>org.omnifaces.component.validator.ValidateAllOrNone</component-type>
		</component>
		<attribute>
			<description>
				<![CDATA[
					The component identifier for this component. This value must be unique within the closest parent 
					component that is a naming container.
				]]>
			</description>
			<name>id</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					Flag indicating whether or not this component should be rendered (during Render Response Phase), or 
					processed on any subsequent form submit. The default value for this property is true.
				]]>
			</description>
			<name>rendered</name>
			<required>false</required>
			<type>java.lang.Boolean</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The <code>ValueExpression</code> linking this component to a property in a backing bean.
				]]>
			</description>
			<name>binding</name>
			<required>false</required>
			<type>javax.faces.component.UIComponent</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The space separated collection of client IDs of UI input components to be validated.
				]]>
			</description>
			<name>components</name>
			<required>true</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The validator message to be shown on failure. Any "{0}" placeholder in the message will be
					substituted with a comma separated string of labels of the referenced input components.
				]]>
			</description>
			<name>message</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The identifier for which this validator should show the message. Defaults to "@this" which is the
					validator component itself. Other available value is "@all" which will show the message for all of
					the referenced components.
				]]>
			</description>
			<name>showMessageFor</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
	</tag>

	<tag>
		<description>
			<![CDATA[
				<strong>ValidateOneOrMore</strong> validates if at least ONE of the given <code>UIInput</code>
				components has been filled in. The default message is
				<blockquote>{0}: Please fill in at least one of those fields</blockquote>
				<p>
				For general usage instructions, refer <code>validateAllOrNone</code> tag documentation.
			]]>
		</description>
		<tag-name>validateOneOrMore</tag-name>
		<component>
			<component-type>org.omnifaces.component.validator.ValidateOneOrMore</component-type>
		</component>
		<attribute>
			<description>
				<![CDATA[
					The component identifier for this component. This value must be unique within the closest parent 
					component that is a naming container.
				]]>
			</description>
			<name>id</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					Flag indicating whether or not this component should be rendered (during Render Response Phase), or 
					processed on any subsequent form submit. The default value for this property is true.
				]]>
			</description>
			<name>rendered</name>
			<required>false</required>
			<type>java.lang.Boolean</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The <code>ValueExpression</code> linking this component to a property in a backing bean.
				]]>
			</description>
			<name>binding</name>
			<required>false</required>
			<type>javax.faces.component.UIComponent</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The space separated collection of client IDs of UI input components to be validated.
				]]>
			</description>
			<name>components</name>
			<required>true</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The validator message to be shown on failure. Any "{0}" placeholder in the message will be
					substituted with a comma separated string of labels of the referenced input components.
				]]>
			</description>
			<name>message</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The identifier for which this validator should show the message. Defaults to "@this" which is the
					validator component itself. Other available value is "@all" which will show the message for all of
					the referenced components.
				]]>
			</description>
			<name>showMessageFor</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
	</tag>

	<tag>
		<description>
			<![CDATA[
				<strong>ValidateEqual</strong> validates if ALL of the given <code>UIInput</code> components have the
				same value. The default message is
				<blockquote>{0}: Please fill in the same value for all of those fields</blockquote>
				<p>
				For general usage instructions, refer <code>validateAllOrNone</code> tag documentation.
			]]>
		</description>
		<tag-name>validateEqual</tag-name>
		<component>
			<component-type>org.omnifaces.component.validator.ValidateEqual</component-type>
		</component>
		<attribute>
			<description>
				<![CDATA[
					The component identifier for this component. This value must be unique within the closest parent 
					component that is a naming container.
				]]>
			</description>
			<name>id</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					Flag indicating whether or not this component should be rendered (during Render Response Phase), or 
					processed on any subsequent form submit. The default value for this property is true.
				]]>
			</description>
			<name>rendered</name>
			<required>false</required>
			<type>java.lang.Boolean</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The <code>ValueExpression</code> linking this component to a property in a backing bean.
				]]>
			</description>
			<name>binding</name>
			<required>false</required>
			<type>javax.faces.component.UIComponent</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The space separated collection of client IDs of UI input components to be validated.
				]]>
			</description>
			<name>components</name>
			<required>true</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The validator message to be shown on failure. Any "{0}" placeholder in the message will be
					substituted with a comma separated string of labels of the referenced input components.
				]]>
			</description>
			<name>message</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The identifier for which this validator should show the message. Defaults to "@this" which is the
					validator component itself. Other available value is "@all" which will show the message for all of
					the referenced components.
				]]>
			</description>
			<name>showMessageFor</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
	</tag>

	<tag>
		<description>
			<![CDATA[
				<strong>ValidateUnique</strong> validates if ALL of the given <code>UIInput</code> components have an
				unique value. The default message is
				<blockquote>{0}: Please fill in an unique value for all of those fields</blockquote>
				<p>
				For general usage instructions, refer <code>validateAllOrNone</code> tag documentation.
			]]>
		</description>
		<tag-name>validateUnique</tag-name>
		<component>
			<component-type>org.omnifaces.component.validator.ValidateUnique</component-type>
		</component>
		<attribute>
			<description>
				<![CDATA[
					The component identifier for this component. This value must be unique within the closest parent 
					component that is a naming container.
				]]>
			</description>
			<name>id</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					Flag indicating whether or not this component should be rendered (during Render Response Phase), or 
					processed on any subsequent form submit. The default value for this property is true.
				]]>
			</description>
			<name>rendered</name>
			<required>false</required>
			<type>java.lang.Boolean</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The <code>ValueExpression</code> linking this component to a property in a backing bean.
				]]>
			</description>
			<name>binding</name>
			<required>false</required>
			<type>javax.faces.component.UIComponent</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The space separated collection of client IDs of UI input components to be validated.
				]]>
			</description>
			<name>components</name>
			<required>true</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The validator message to be shown on failure. Any "{0}" placeholder in the message will be
					substituted with a comma separated string of labels of the referenced input components.
				]]>
			</description>
			<name>message</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The identifier for which this validator should show the message. Defaults to "@this" which is the
					validator component itself. Other available value is "@all" which will show the message for all of
					the referenced components.
				]]>
			</description>
			<name>showMessageFor</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
	</tag>

	<!-- Functions ================================================================================================ -->
	
	<function>
		<description>
			<![CDATA[
				URL-encode the given string using UTF-8. This is useful for cases where you can't use 
				<code>&lt;f:param&gt;</code>.
			]]>
		</description>
		<function-name>encodeURL</function-name>
		<function-class>org.omnifaces.el.Functions</function-class>
		<function-signature>java.lang.String encodeURL(java.lang.String)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Escapes the given string according the JavaScript code rules. This escapes among others the special
				characters, the whitespace, the quotes and the unicode characters. Useful whenever you want to use a
				Java string variable as a JavaScript string variable.
			]]>
		</description>
		<function-name>escapeJS</function-name>
		<function-class>org.omnifaces.el.Functions</function-class>
		<function-signature>java.lang.String escapeJS(java.lang.String)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				URL-prettify the given string. It performs the following tasks:
				<ul>
				<li>Lowercase the string.
				<li>Remove combining diacritical marks.
				<li>Replace non-alphanumeric characters by hyphens.
				</ul>
				This is useful when populating links with dynamic paths obtained from user controlled variables, such
				as blog titles.
 			]]>
		</description>
		<function-name>prettyURL</function-name>
		<function-class>com.mbuyu.m4n.Utils</function-class>
		<function-signature>java.lang.String prettyURL(java.lang.String)</function-signature>
	</function>
	
	<function>
		<description>
			<![CDATA[
				Abbreviate the given text on the given size limit with ellipsis.
			]]>
		</description>
		<function-name>abbreviate</function-name>
		<function-class>org.omnifaces.el.Functions</function-class>
		<function-signature>java.lang.String abbreviate(java.lang.String, int)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Concatenate the string representation of the given objects. This is useful when you don't know
				beforehand if one of the both hands is a string or is <code>null</code>, otherwise the new EL 2.2
				<code>#{bean.string1.concat(bean.string2)}</code> can just be used.
			]]>
		</description>
		<function-name>concat</function-name>
		<function-class>org.omnifaces.el.Functions</function-class>
		<function-signature>java.lang.String concat(java.lang.String, java.lang.String)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Format the given date in the given pattern. This is useful when you want to format dates in for example
				the <code>title</code> attribute of an UI component, or the <code>itemLabel</code> attribute of select
				item, or wherever you can't use the <code>&lt;f:convertDateTime&gt;</code> tag.
			]]>
		</description>
		<function-name>formatDate</function-name>
		<function-class>org.omnifaces.el.Functions</function-class>
		<function-signature>java.lang.String formatDate(java.util.Date, java.lang.String)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Creates and returns a dummy object array of the given size. This is useful if you want to iterate
				<i>n</i> times over an <code>&lt;ui:repeat&gt;</code>, which doesn't support EL in <code>begin</code>
				and <code>end</code> attributes.
			]]>
		</description>
		<function-name>createArray</function-name>
		<function-class>org.omnifaces.el.Functions</function-class>
		<function-signature>java.lang.Object[] createArray(int)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Converts a <code>Set&lt;E&gt;</code> to a <code>List&lt;E&gt;</code>. Useful when you want to iterate
				over a <code>Set</code> in for example <code>&lt;ui:repeat&gt;</code>.
			]]>
		</description>
		<function-name>setToList</function-name>
		<function-class>org.omnifaces.el.Functions</function-class>
		<function-signature>java.util.List setToList(java.util.Set)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Converts a <code>Map&lt;K, V&gt;</code> to a <code>List&lt;Map.Entry&ltK, V&gt;&gt;</code>. Useful when
				you want to iterate over a <code>Map</code> in for example <code>&lt;ui:repeat&gt;</code>. Each of the
				entries has the usual <code>getKey()</code> and <code>getValue()</code> methods.
			]]>
		</description>
		<function-name>mapToList</function-name>
		<function-class>org.omnifaces.el.Functions</function-class>
		<function-signature>java.util.List mapToList(java.util.Map)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Returns <code>true</code> if the string representation of an item of the given array equals to the
				string representation of the given item. This returns <code>false</code> if either the array or the
				item is null. This is useful if you want to for example check if <code>#{paramValues.foo}</code>
				contains a certain value.
			]]>
		</description>
		<function-name>contains</function-name>
		<function-class>org.omnifaces.el.Functions</function-class>
		<function-signature>boolean contains(java.lang.Object[], java.lang.Object)</function-signature>
	</function>

</facelet-taglib>