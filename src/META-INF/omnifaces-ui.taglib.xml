<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright 2012 OmniFaces.

   Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
   the License. You may obtain a copy of the License at

	   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
   an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
   specific language governing permissions and limitations under the License.
 -->
<facelet-taglib id="o"
	xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-facelettaglibrary_2_0.xsd"
	version="2.0"
>
	<description>OmniFaces UI components.</description>
	<namespace>http://omnifaces.org/ui</namespace>

	<!-- Tree ===================================================================================================== -->

	<tag>
		<description>
			<![CDATA[
				<strong><code>o:tree</code></strong> is an <code>UIComponent</code> that supports data binding to a tree
				of data objects represented by a <code>TreeModel</code> instance, which is the current value of this
				component itself (typically established via a <code>ValueExpression</code>. During iterative processing
				over the nodes of tree in the tree model, the object for the current node is exposed as a request
				attribute under the key specified by the <code>var</code> attribute. The node itself is exposed as a
				request attribute under the key specified by the <code>varNode</code> attribute.
				<p>
				Only children of type <code>TreeNode</code> are allowed and processed by this component.
				<p>
				This component does not have a renderer since it does not render any markup by itself. This allows the
				developers to have full control over the markup of the tree by declaring the appropriate JSF components
				or HTML elements in the markup. Here is a basic usage example:
				<pre>
&lt;o:tree value="#{bean.treeModel}" var="item" varNode="node"&gt;
  &lt;o:treeNode&gt;
    &lt;ul&gt;
      &lt;o:treeNodeItem&gt;
        &lt;li&gt;
          #{node.index} #{item.someProperty}
          &lt;o:treeInsertChildren /&gt;
        &lt;/li&gt;
      &lt;/o:treeNodeItem&gt;
    &lt;/ul&gt;
  &lt;/o:treeNode&gt;
&lt;/o:tree&gt;
				</pre>
			]]>
		</description>
		<tag-name>tree</tag-name>
		<component>
			<component-type>org.omnifaces.component.tree.Tree</component-type>
		</component>
		<attribute>
			<description>
				<![CDATA[
					The component identifier for this component. This value must be unique within the closest parent
					component that is a naming container.
				]]>
			</description>
			<name>id</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					Flag indicating whether or not this component should be rendered (during Render Response Phase), or
					processed on any subsequent form submit. The default value for this property is true.
				]]>
			</description>
			<name>rendered</name>
			<required>false</required>
			<type>java.lang.Boolean</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The <code>ValueExpression</code> linking this component to a property in a backing bean.
				]]>
			</description>
			<name>binding</name>
			<required>false</required>
			<type>javax.faces.component.UIComponent</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The current value of this component. As far only <code>TreeModel</code> is allowed as value.
				]]>
			</description>
			<name>value</name>
			<required>false</required>
			<type>java.lang.Object</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The name of the request attribute which exposes the wrapped data of the current node of the tree
					model.
				]]>
			</description>
			<name>var</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The name of the request attribute which exposes the current node of the tree model.
				]]>
			</description>
			<name>varNode</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
	</tag>

	<tag>
		<description>
			<![CDATA[
				<strong><code>o:treeNode</code></strong> is an <code>UIComponent</code> that represents a single tree node
				within a parent <code>Tree</code> component. Within this component, the <code>var</code> attribute of
				the parent <code>Tree</code> component will expose the tree node. Each of its children is processed by
				<code>TreeNodeItem</code>.
				<p>
				The <code>level</code> attribute can be used to specify for which tree node level as obtained by
				<code>TreeModel#getLevel()</code> this component should render the children by
				<code>TreeNodeItem</code>. The root tree node has level 0.
			]]>
		</description>
		<tag-name>treeNode</tag-name>
		<component>
			<component-type>org.omnifaces.component.tree.TreeNode</component-type>
		</component>
		<attribute>
			<description>
				<![CDATA[
					The component identifier for this component. This value must be unique within the closest parent
					component that is a naming container.
				]]>
			</description>
			<name>id</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					Flag indicating whether or not this component should be rendered (during Render Response Phase), or
					processed on any subsequent form submit. The default value for this property is true.
				]]>
			</description>
			<name>rendered</name>
			<required>false</required>
			<type>java.lang.Boolean</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The <code>ValueExpression</code> linking this component to a property in a backing bean.
				]]>
			</description>
			<name>binding</name>
			<required>false</required>
			<type>javax.faces.component.UIComponent</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The tree node level to render the node children for. The root level is <code>0</code>.
				]]>
			</description>
			<name>level</name>
			<required>false</required>
			<type>java.lang.Integer</type>
		</attribute>
	</tag>

	<tag>
		<description>
			<![CDATA[
				<strong><code>o:treeNodeItem</code></strong> is an <code>UIComponent</code> that represents a single child
				tree node within a parent <code>TreeNode</code> component. Within this component, the <code>var</code>
				attribute of the parent <code>Tree</code> component will expose the child tree node.
				<p>
				This component allows a child component of type <code>TreeInsertChildren</code> which indicates the
				place to insert the children of the current child tree node recursively by a <code>TreeNode</code>
				component associated with the children's level in the same parent <code>Tree</code> component.
			]]>
		</description>
		<tag-name>treeNodeItem</tag-name>
		<component>
			<component-type>org.omnifaces.component.tree.TreeNodeItem</component-type>
		</component>
		<attribute>
			<description>
				<![CDATA[
					The component identifier for this component. This value must be unique within the closest parent
					component that is a naming container.
				]]>
			</description>
			<name>id</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					Flag indicating whether or not this component should be rendered (during Render Response Phase), or
					processed on any subsequent form submit. The default value for this property is true.
				]]>
			</description>
			<name>rendered</name>
			<required>false</required>
			<type>java.lang.Boolean</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The <code>ValueExpression</code> linking this component to a property in a backing bean.
				]]>
			</description>
			<name>binding</name>
			<required>false</required>
			<type>javax.faces.component.UIComponent</type>
		</attribute>
	</tag>

	<tag>
		<description>
			<![CDATA[
				<strong><code>o:treeInsertChildren</code></strong> is an <code>UIComponent</code> that represents the
				insertion point for the children of a parent tree node which is represented by
				<code>TreeNodeItem</code>.
				<p>
				This component does not allow any children.
			]]>
		</description>
		<tag-name>treeInsertChildren</tag-name>
		<component>
			<component-type>org.omnifaces.component.tree.TreeInsertChildren</component-type>
		</component>
		<attribute>
			<description>
				<![CDATA[
					The component identifier for this component. This value must be unique within the closest parent
					component that is a naming container.
				]]>
			</description>
			<name>id</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					Flag indicating whether or not this component should be rendered (during Render Response Phase), or
					processed on any subsequent form submit. The default value for this property is true.
				]]>
			</description>
			<name>rendered</name>
			<required>false</required>
			<type>java.lang.Boolean</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The <code>ValueExpression</code> linking this component to a property in a backing bean.
				]]>
			</description>
			<name>binding</name>
			<required>false</required>
			<type>javax.faces.component.UIComponent</type>
		</attribute>
	</tag>

	<tag>
		<description>
			This component includes the output from a resource located at the given path. This path can
			not extend outside of the current Servlet context. A resource is either a Servlet or a JSP
			page.
		</description>
		<tag-name>resourceInclude</tag-name>
		<component>
			<component-type>org.omnifaces.component.resourceinclude.ResourceInclude</component-type>
		</component>
		 <attribute>
			<description>A String specifying the pathname to the resource</description>
			<name>path</name>
			<required>true</required>
			<type>java.lang.String</type>
		</attribute>
	</tag>

	<!-- Validator ================================================================================================ -->

	<tag>
		<description>
			<![CDATA[
				<strong><code>o:validateAllOrNone</code></strong> validates validates if at least ALL of the given <code>UIInput</code>
				components have been filled in or that NONE of the given <code>UIInput</code> components have been
				filled in. The default message is
				<blockquote>{0}: Please fill out all or none of those fields</blockquote>
				<hr>
				<h3>General usage of all multiple field validators</h3>
				<p>
				This validator must be placed inside the same <code>UIForm</code> as the <code>UIInput</code> components
				in question. The <code>UIInput</code> components must be referenced by a space separated collection of
				their client IDs in the <code>components</code> attribute. This validator can be placed anywhere in the
				form, but keep in mind that the components will be validated in the order as they appear in the form.
				So if this validator is been placed before all of the components, then it will be executed before any of
				the component's own validators. If this validator fails, then the component's own validators will not be
				fired. If this validator is been placed after all of the components, then it will be executed after any
				of the component's own validators. If any of them fails, then this validator will not be exeucted. It
				is not recommended to put this validator somewhere in between the referenced components as the resulting
				behaviour may be confusing. Put this validator either before or after all of the components, depending
				on how you would like to prioritize the validation.
				<pre>
&lt;o:validateMultipleFields id="myId" components="foo bar baz" /&gt;
&lt;h:message for="myId" /&gt;
&lt;h:inputText id="foo" /&gt;
&lt;h:inputText id="bar" /&gt;
&lt;h:inputText id="baz" /&gt;
				</pre>
				<p>
				In an invalidating case, all of the referenced components will be marked invalid and a faces message
				will be added on the client ID of this validator component. The default message can be changed by the
				<code>message</code> attribute. Any "{0}" placeholder in the message will be substituted with a comma
				separated string of labels of the referenced input components.
				<pre>
&lt;o:validateMultipleFields components="foo bar baz" message="{0} are wrong!" /&gt;
				</pre>
				<p>
				The faces message can also be shown for all of the referenced components using
				<code>showMessageFor="@all"</code>.
				<pre>
&lt;o:validateMultipleFields components="foo bar baz" message="This is wrong!" showMessageFor="@all" /&gt;
&lt;h:inputText id="foo" /&gt;
&lt;h:message for="foo" /&gt;
&lt;h:inputText id="bar" /&gt;
&lt;h:message for="bar" /&gt;
&lt;h:inputText id="baz" /&gt;
&lt;h:message for="baz" /&gt;
				</pre>
				<p>
				The <code>showMessageFor</code> attribute defaults to <code>@this</code>. Other values than
				<code>@this</code> or <code>@all</code> are not allowed.
			]]>
		</description>
		<tag-name>validateAllOrNone</tag-name>
		<component>
			<component-type>org.omnifaces.component.validator.ValidateAllOrNone</component-type>
		</component>
		<attribute>
			<description>
				<![CDATA[
					The component identifier for this component. This value must be unique within the closest parent
					component that is a naming container.
				]]>
			</description>
			<name>id</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					Flag indicating whether or not this component should be rendered (during Render Response Phase), or
					processed on any subsequent form submit. The default value for this property is true.
				]]>
			</description>
			<name>rendered</name>
			<required>false</required>
			<type>java.lang.Boolean</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The <code>ValueExpression</code> linking this component to a property in a backing bean.
				]]>
			</description>
			<name>binding</name>
			<required>false</required>
			<type>javax.faces.component.UIComponent</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The space separated collection of client IDs of UI input components to be validated.
				]]>
			</description>
			<name>components</name>
			<required>true</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The validator message to be shown on failure. Any "{0}" placeholder in the message will be
					substituted with a comma separated string of labels of the referenced input components.
				]]>
			</description>
			<name>message</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The identifier for which this validator should show the message. Defaults to "@this" which is the
					validator component itself. Other available value is "@all" which will show the message for all of
					the referenced components.
				]]>
			</description>
			<name>showMessageFor</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
	</tag>

	<tag>
		<description>
			<![CDATA[
				<strong><code>o:validateOneOrMore</code></strong> validates if at least ONE of the given <code>UIInput</code>
				components has been filled in. The default message is
				<blockquote>{0}: Please fill out at least one of those fields</blockquote>
				<p>
				For general usage instructions, refer <code>validateAllOrNone</code> tag documentation.
			]]>
		</description>
		<tag-name>validateOneOrMore</tag-name>
		<component>
			<component-type>org.omnifaces.component.validator.ValidateOneOrMore</component-type>
		</component>
		<attribute>
			<description>
				<![CDATA[
					The component identifier for this component. This value must be unique within the closest parent
					component that is a naming container.
				]]>
			</description>
			<name>id</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					Flag indicating whether or not this component should be rendered (during Render Response Phase), or
					processed on any subsequent form submit. The default value for this property is true.
				]]>
			</description>
			<name>rendered</name>
			<required>false</required>
			<type>java.lang.Boolean</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The <code>ValueExpression</code> linking this component to a property in a backing bean.
				]]>
			</description>
			<name>binding</name>
			<required>false</required>
			<type>javax.faces.component.UIComponent</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The space separated collection of client IDs of UI input components to be validated.
				]]>
			</description>
			<name>components</name>
			<required>true</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The validator message to be shown on failure. Any "{0}" placeholder in the message will be
					substituted with a comma separated string of labels of the referenced input components.
				]]>
			</description>
			<name>message</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The identifier for which this validator should show the message. Defaults to "@this" which is the
					validator component itself. Other available value is "@all" which will show the message for all of
					the referenced components.
				]]>
			</description>
			<name>showMessageFor</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
	</tag>

	<tag>
		<description>
			<![CDATA[
				<strong><code>o:validateEqual</code></strong> validates if ALL of the given <code>UIInput</code> components have the
				same value. The default message is
				<blockquote>{0}: Please fill out the same value for all of those fields</blockquote>
				<p>
				For general usage instructions, refer <code>validateAllOrNone</code> tag documentation.
			]]>
		</description>
		<tag-name>validateEqual</tag-name>
		<component>
			<component-type>org.omnifaces.component.validator.ValidateEqual</component-type>
		</component>
		<attribute>
			<description>
				<![CDATA[
					The component identifier for this component. This value must be unique within the closest parent
					component that is a naming container.
				]]>
			</description>
			<name>id</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					Flag indicating whether or not this component should be rendered (during Render Response Phase), or
					processed on any subsequent form submit. The default value for this property is true.
				]]>
			</description>
			<name>rendered</name>
			<required>false</required>
			<type>java.lang.Boolean</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The <code>ValueExpression</code> linking this component to a property in a backing bean.
				]]>
			</description>
			<name>binding</name>
			<required>false</required>
			<type>javax.faces.component.UIComponent</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The space separated collection of client IDs of UI input components to be validated.
				]]>
			</description>
			<name>components</name>
			<required>true</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The validator message to be shown on failure. Any "{0}" placeholder in the message will be
					substituted with a comma separated string of labels of the referenced input components.
				]]>
			</description>
			<name>message</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The identifier for which this validator should show the message. Defaults to "@this" which is the
					validator component itself. Other available value is "@all" which will show the message for all of
					the referenced components.
				]]>
			</description>
			<name>showMessageFor</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
	</tag>

	<tag>
		<description>
			<![CDATA[
				<strong><code>o:validateUnique</code></strong> validates if ALL of the given <code>UIInput</code> components have an
				unique value. The default message is
				<blockquote>{0}: Please fill out an unique value for all of those fields</blockquote>
				<p>
				For general usage instructions, refer <code>validateAllOrNone</code> tag documentation.
			]]>
		</description>
		<tag-name>validateUnique</tag-name>
		<component>
			<component-type>org.omnifaces.component.validator.ValidateUnique</component-type>
		</component>
		<attribute>
			<description>
				<![CDATA[
					The component identifier for this component. This value must be unique within the closest parent
					component that is a naming container.
				]]>
			</description>
			<name>id</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					Flag indicating whether or not this component should be rendered (during Render Response Phase), or
					processed on any subsequent form submit. The default value for this property is true.
				]]>
			</description>
			<name>rendered</name>
			<required>false</required>
			<type>java.lang.Boolean</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The <code>ValueExpression</code> linking this component to a property in a backing bean.
				]]>
			</description>
			<name>binding</name>
			<required>false</required>
			<type>javax.faces.component.UIComponent</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The space separated collection of client IDs of UI input components to be validated.
				]]>
			</description>
			<name>components</name>
			<required>true</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The validator message to be shown on failure. Any "{0}" placeholder in the message will be
					substituted with a comma separated string of labels of the referenced input components.
				]]>
			</description>
			<name>message</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The identifier for which this validator should show the message. Defaults to "@this" which is the
					validator component itself. Other available value is "@all" which will show the message for all of
					the referenced components.
				]]>
			</description>
			<name>showMessageFor</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
	</tag>
	
	<tag>
		<description>
			<![CDATA[
				<strong><code>o:validateOrder</code></strong> validates if the values of the given <code>UIInput</code>
				components are in the order from least to greatest without duplicates, exactly as specified in the 
				<code>components</code> attribute. The default message is
				<blockquote>{0}: Please fill out the values of all those fields in order</blockquote>
				<p>
				For general usage instructions, refer <code>validateAllOrNone</code> tag documentation.
				<p>
				This validator has the additional requirement that the to-be-validated values must implement
				<code>Comparable</code>. This validator throws an <code>IllegalArgumentException</code> when one or
				more of the values do not implement it.
			]]>
		</description>
		<tag-name>validateOrder</tag-name>
		<component>
			<component-type>org.omnifaces.component.validator.ValidateOrder</component-type>
		</component>
		<attribute>
			<description>
				<![CDATA[
					The component identifier for this component. This value must be unique within the closest parent
					component that is a naming container.
				]]>
			</description>
			<name>id</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					Flag indicating whether or not this component should be rendered (during Render Response Phase), or
					processed on any subsequent form submit. The default value for this property is true.
				]]>
			</description>
			<name>rendered</name>
			<required>false</required>
			<type>java.lang.Boolean</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The <code>ValueExpression</code> linking this component to a property in a backing bean.
				]]>
			</description>
			<name>binding</name>
			<required>false</required>
			<type>javax.faces.component.UIComponent</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The space separated collection of client IDs of UI input components to be validated.
				]]>
			</description>
			<name>components</name>
			<required>true</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The validator message to be shown on failure. Any "{0}" placeholder in the message will be
					substituted with a comma separated string of labels of the referenced input components.
				]]>
			</description>
			<name>message</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The identifier for which this validator should show the message. Defaults to "@this" which is the
					validator component itself. Other available value is "@all" which will show the message for all of
					the referenced components.
				]]>
			</description>
			<name>showMessageFor</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
	</tag>
	

	<tag>
		<description>
				<![CDATA[
					<strong><code>o:viewParam</code></strong> is a component that extends the standard viewParam and provides a stateless
	 				mode of operation and a default for the label atrribute. When the label attribute is ommitted, the name
	 				attribute will be used instead.
	 				<p>
	 				The standard UIViewParameter implementation calls the model setter again after postback. This is not always desired when being
					bound to a view scoped beans and can lead to performance problems when combined with an expensive converter.
					<p>
					To solve this, this component by default stores the submitted value as a component property instead of in the model (and thus
					in the view state in case the binding is to a view scoped bean).
					<p>
					You can use it the same way as <code>&lt;f:viewParam&gt;</code>, you only need to change <code>f:</code> by
					<code>o:</code>.
				]]>
		</description>
		<tag-name>viewParam</tag-name>
		<component>
			<component-type>org.omnifaces.component.viewparam.ViewParam</component-type>
		</component>
		<attribute>
			<description>
				<![CDATA[
	                The name of the request parameter from which the value for this component
	                is retrieved on an initial request or to override the stored value on a
	                postback.
		        ]]>
			</description>
			<name>name</name>
			<required>true</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
	                Converter instance registered with this component.
	            ]]></description>
			<name>converter</name>
			<required>false</required>
			<type>javax.faces.convert.Converter</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
	                A ValueExpression enabled attribute that, if present, will be
	                used as the text of the converter message, replacing any message
	                that comes from the converter.
	            ]]>
			</description>
			<name>converterMessage</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
	                The component identifier for this component. This value must be
	                unique within the closest parent component that is a naming
	                container.
	            ]]>
			</description>
			<name>id</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
	                Flag indicating that the user is required to provide a submitted
	                value for this input component. This component extends the behavior of
	                this by only making this required for a non-faces request.
	            ]]>
			</description>
			<name>required</name>
			<required>false</required>
			<type>boolean</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
	                A ValueExpression enabled attribute that, if present, will be
	                used as the text of the validation message for the "required"
	                facility, if the "required" facility is used.
	            ]]>
			</description>
			<name>requiredMessage</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
	                MethodExpression representing a validator method that will be
	                called
	                during Process Validations to perform correctness checks on the
	                value of this component. The expression must evaluate to a
	                public
	                method that takes FacesContext, UIComponent, and Object
	                parameters,
	                with a return type of void.
	            ]]>
			</description>
			<name>validator</name>
			<required>false</required>
			<method-signature>void validate(javax.faces.context.FacesContext,
				javax.faces.component.UIComponent, java.lang.Object)
			</method-signature>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
	                A ValueExpression enabled attribute that, if present, will be
	                used as the text of the validator message, replacing any
	                message that comes from the validator.
	            ]]>
			</description>
			<name>validatorMessage</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
	                A ValueExpression to which the value of the request parameter, as
	                determined by the name attribute, is bound. The resolved value of this
	                expression is used when encoding the view parameter into a bookmarkable link or
	                redirect URL with view parameter encoding enabled. If this attribute is omitted,
	                the value of the request parameter will instead be the local value of the
	                UIViewParameter.
	            ]]>
            </description>
			<name>value</name>
			<required>false</required>
			<type>java.lang.Object</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
	                <p>
	
	                MethodExpression representing a value change listener method
	                that will be notified when a new value has been set for this
	                input component. The expression must evaluate to a public
	                method that takes a <code>ValueChangeEvent</code>
	                parameter,
	                with a return type of void, or
	                to a public method that takes no arguments with a return type
	                of void. In the latter case, the method has no way of easily
	                knowing what the new value is, but this can be useful in cases
	                where a notification is needed that "this value
	                changed".
	
	                </p>
	            ]]>
			</description>
			<name>valueChangeListener</name>
			<required>false</required>
			<method-signature>void
				valueChange(javax.faces.event.ValueChangeEvent)
			</method-signature>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
	                The maximum number of characters that may
	                be entered in this field.
	            ]]>
			</description>
			<name>maxlength</name>
			<required>false</required>
			<type>int</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
	                The ValueExpression linking this component to a property in a
	                backing bean
	            ]]>
			</description>
			<name>binding</name>
			<required>false</required>
			<type>javax.faces.component.UIComponent</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
	                If present, this attribute refers to the value of one of the exposed
	                attached objects within the composite component inside
	                of which this tag is nested.
	            ]]>
            </description>
			<name>for</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
	</tag>

		<tag>
		<description>
			<![CDATA[
				<strong><code>o:methodParam</code></strong> is a tag handler that can be used to pass a method expression
				into a Facelets tag.
				<p>
				By default this is not possible, and the expression that's intended to be a method expression will be created and
				made available as a value expression. This handler should be placed inside a Facelets tag as follows:				
				<pre>
&lt;ui:composition
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:o="http://omnifaces.org/ui"
&gt;
	&lt;o:methodParam name="method" value="#{action}"/&gt;
	
	&lt;h:commandButton value="test" action="#{method}" /&gt;
		
&lt;/ui:composition&gt;
				</pre>
				<p>
				Assuming the above is a tag called <code>actionmethod</code> in the namespace <code>test</code>, a method can be passed into it
				as follows:				
				<pre>				
&lt;test:actionmethod action="#{methodParamBean.doAction}" /&gt;
				</pre>
				<p>				
				In case a method with no parameters is passed that is to be used as an action listener with no parameters, then the component
				using this method unfortunely has to be wrapped by a component that puts the method in request scoped (with nested visibility),
				e.g. by using <code>ui:repeat</code> as follows:				
				<pre>
&lt;ui:repeat var="method" value="#{method}"&gt;
	&lt;h:commandButton value="test" actionListener="#{method}" /&gt;
&lt;/ui:repeat&gt;
				</pre>
				<p>
				Using modern EL implementations, this is not needed in case the EL expression references the method using explicit parenthesis,
				e.g. <code>#{methodParamBean.doAction()}</code>							
			]]>
		</description>
		<tag-name>methodParam</tag-name>
		<handler-class>org.omnifaces.facelets.MethodParamHandler</handler-class>
		<attribute>
			<description>
				<![CDATA[
	               Name under which the method expression will be made available to EL, scoped to the body of the Facelets tag.
	            ]]>
            </description>
			<name>name</name>
			<required>true</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
	               The value expression that is to be interpreted and invoked as a method expression. This is typically the
	               name of the parameter by which a value is passed into the Facelets tag.
	            ]]>
            </description>
			<name>value</name>
			<required>true</required>
			<type>java.lang.String</type>
		</attribute>
	</tag>



</facelet-taglib>